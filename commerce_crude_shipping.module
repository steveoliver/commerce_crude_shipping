<?php

use Drupal\commerce_order\Adjustment;
use Drupal\commerce_order\Entity\OrderInterface;
use Drupal\commerce_price\Price;

/**
 * @file
 *
 * Commerce Crude Shipping module.
 */

/**
 * Implements hook_commerce_avatax_order_request_alter().
 *
 * @param array $request_body
 * @param \Drupal\commerce_order\Entity\OrderInterface $order
 */
function commerce_crude_shipping_commerce_avatax_order_request_alter(array &$request_body, OrderInterface $order) {
  foreach ($order->getItems() as $item) {
    foreach ($item->getAdjustments() as $adjustment) {
      if ($adjustment->getType() == 'shipping') {
        $request_body['lines'][] = [
          'number' => $item->id() . '_shipping',
          'quantity' => $item->getQuantity(),
          'amount' => $adjustment->getAmount()->getNumber(),
          // Shipping & Handling combined (taxable).
          'taxCode' => 'FR030000',
        ];
      }
    }
  }
}

/**
 * Implements hook_commerce_avatax_order_response_alter().
 *
 * Adds sales tax adjustments to items with taxable shipping charges.
 *
 * @param array $response_body
 *   The response body.
 * @param \Drupal\commerce_order\Entity\OrderInterface $order
 *   The order.
 */
function commerce_crude_shipping_commerce_avatax_order_response_alter(array $response_body, OrderInterface $order) {
  $items_tax = [];
  $order_currency_code = $order->getTotalPrice()->getCurrencyCode();
  foreach ($response_body['lines'] as $line) {
    $items_tax[$line['lineNumber']] = $line['tax'];
  }
  foreach ($order->getItems() as $item) {
    if (isset($items_tax[$item->id() . '_shipping'])) {
      $adjustment_amount = $items_tax[$item->id() . '_shipping'];
      $item->addAdjustment(new Adjustment([
        'type' => 'sales_tax',
        'label' => 'Sales tax (shipping)',
        'amount' => new Price((string) $adjustment_amount, $order_currency_code),
        'source_id' => $order->id(),
      ]));
    }
  }
}
